name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main 

# Définir les jobs de CI/CD
jobs:
  build-and-test:
    runs-on: ubuntu-latest 

    
    steps:
      # Étape 1 : Checkout du code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Étape 2 : Installer Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Étape 3 : Construire l'image Docker de Node.js
      - name: Build Node.js Docker image
        run: docker-compose -f docker-compose.yml build

      # Étape 4 : Démarrer les services via Docker Compose
      - name: Start Docker Compose services
        run: docker-compose -f docker-compose.yml up -d

      # Étape 5 : Exécuter les tests
      - name: Run Tests
        run: |
          docker exec node-backend npm install
          docker exec node-backend npm test

      # Étape 6 : Arrêter les services après les tests
      - name: Stop Docker Compose services
        run: docker-compose -f docker-compose.yml down

  # # Job de déploiement
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test  # Le job deploy dépend du job précédent "build-and-test"

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v2

  #     - name: Deploy Application (ex. vers un serveur de production)
  #       run: |
  #         # Commande pour déployer votre app, par exemple vers un serveur
  #         echo "Deploying to production server..."
  #         # Vous pouvez ajouter des commandes pour déployer votre app sur AWS, Azure, ou autre.
